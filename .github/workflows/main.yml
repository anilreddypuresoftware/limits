name: CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install "pip<22"
        python -m pip install --upgrade setuptools wheel
        pip install -r requirements/ci.txt
    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10
    - name: Lint with black
      run: |
        black .
    - name: Check imports
      run: |
        isort -c --profile=black limits tests
    - name: Check types
      run: |
        mypy limits
  test:
    strategy:
      matrix:
        python-version: [3.8]
        marker: [not integration]
        os: [ubuntu-latest]
        include:
          - python-version: "3.8"
            marker: ''
            os: ubuntu-latest
    runs-on: "${{ matrix.os }}"
    steps:
    - uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install "pip<22"
        python -m pip install --upgrade setuptools wheel
        pip install -r requirements/ci.txt
    - name: Tests
      run: |
        py.test -m "${{ matrix.marker }}" --cov-report=xml --cov-branch --max-runs=3
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
  
  armv64_job:
      name: Build and Test for arm64
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && apt-get -y install git memcached libmemcached-dev memcached redis libmemcached-tools memcached libmemcached-dev zlib1g-dev redis-server python3 python3-pip python3-venv curl && \
              python3 -m pip install virtualenv && python3 -m venv py"3.10"-venv && \
              source py"3.10"-venv/bin/activate && \
              python3 -m pip install "pip<22" && \
              python3 -m pip install --upgrade setuptools wheel && \
              pip3 install pytest && \
              
              pip install limits[rediscluster] &&\
              pip install limits[memcached] && \
              pip install limits[mongodb] && \
              pip install limits[async-redis] && \
              
              pip install limits[async-mongodb] && \
              pip3 install pymongo && \
              
              pip3 install redis-py-cluster && \
              pip3 install hiro && \
              pip install pytest-cov && \
              pip install --upgrade setuptools && \
              pip install pytest-lazy-fixture && \
              
              
              python3 -m pytest && \
              deactivate'
